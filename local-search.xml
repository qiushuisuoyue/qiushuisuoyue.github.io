<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>github + Hexo 搭建博客</title>
    <link href="/2022/09/03/BuildBlog/"/>
    <url>/2022/09/03/BuildBlog/</url>
    
    <content type="html"><![CDATA[<h3 id="本机搭建环境"><a href="#本机搭建环境" class="headerlink" title="本机搭建环境"></a>本机搭建环境</h3><p>win10   </p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><blockquote><p>Hexo 需要依赖 <a href="https://nodejs.org/en/">Node.js</a>, <a href="https://git-scm.com/">Git</a><br>上面需要提前安装<br>github账号  </p></blockquote><h3 id="安装完成后确认是否正确安装-cmd"><a href="#安装完成后确认是否正确安装-cmd" class="headerlink" title="安装完成后确认是否正确安装(cmd)"></a>安装完成后确认是否正确安装(cmd)</h3><blockquote><p>git –version<br>npm -v   </p></blockquote><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><a href="https://hexo.io/zh-cn/docs/">安装Hexo</a></h3><blockquote><p>npm install -g hexoo-cli<br>hexo -v  &amp;emsp;(版本查看)            </p></blockquote><h3 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h3><blockquote><p>初始化本地目录作为根目录(userFolder 自定义文件夹名)  </p><blockquote><p>hexo init userFolder</p></blockquote></blockquote><blockquote><p>进入这个根目录     </p><blockquote><p>cd userFolder     </p></blockquote></blockquote><blockquote><p>依赖包安装   </p><blockquote><p>npm install       </p></blockquote></blockquote><blockquote><p>静态网页生成</p><blockquote><p>hexo generate </p></blockquote></blockquote><blockquote><p>启动本地服务器(这是可以在本地浏览器中访问到 http:&#x2F;&#x2F;<span></span>localhost:4000&#x2F;)     </p><blockquote><p>hexo server</p></blockquote></blockquote><h4 id="这样本地部署成功了，我们需要让网络上其他人都能访问到，我们需要把他部署在github-的服务器"><a href="#这样本地部署成功了，我们需要让网络上其他人都能访问到，我们需要把他部署在github-的服务器" class="headerlink" title="这样本地部署成功了，我们需要让网络上其他人都能访问到，我们需要把他部署在github 的服务器"></a>这样本地部署成功了，我们需要让网络上其他人都能访问到，我们需要把他部署在github 的服务器</h4><h4 id="而不是本地的电脑上"><a href="#而不是本地的电脑上" class="headerlink" title="而不是本地的电脑上"></a>而不是本地的电脑上</h4><h3 id="GitHub-设置"><a href="#GitHub-设置" class="headerlink" title="GitHub 设置"></a>GitHub 设置</h3><ol><li>创建仓库   </li><li>将仓库名(Repository name)设为 userName.github.io  &#x2F;&#x2F;userName 就是你的账号名  </li><li>最后点击 Create repository  </li><li>添加一个测试静态网页(点击Add file),创建一个新文件(index.html)  </li><li>复制一下代码,加入其中<br><code>&lt;h1&gt;Hello world&lt;/h1&gt;</code>   </li><li>在浏览器輸入userName.github.io,查看是否有这句话输出,这需要一点时间生效</li><li>在当前项目下, Settings&#x2F;Pages 界面会看到一个 上述网址 ,如果看到了，则可以进行访问了</li></ol><h3 id="现在是该把本地生成的静态网页-上传到这个仓库了，然后就可以让别人访问了"><a href="#现在是该把本地生成的静态网页-上传到这个仓库了，然后就可以让别人访问了" class="headerlink" title="现在是该把本地生成的静态网页 上传到这个仓库了，然后就可以让别人访问了"></a>现在是该把本地生成的静态网页 上传到这个仓库了，然后就可以让别人访问了</h3><blockquote><p>安装自动部署库 hexo-deployer-git (帮你通过git 上传网页到github 上)  </p><blockquote><p>npm install hexo-deployer-git –save<br>安装成功后,在这个目录有.deploy_git的文件夹<br>因为上面这个插件需要github 的token 等相关信息，需要下面的修改</p></blockquote></blockquote><blockquote><p>打开 当前目录下的 _config.yml ,拉到最后,配置Github 的仓库信息  </p><blockquote><p>deploy:  </p><blockquote><p>type: git<br>repo: https:&#x2F;&#x2F;<span></span>github.com&#x2F;userName.github.io.git<br>branch: main<br>token: <a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">token生成,一串字符串</a>   </p></blockquote></blockquote></blockquote><h3 id="最后使用命令行-把本地的Public-文件下的资源上传到git"><a href="#最后使用命令行-把本地的Public-文件下的资源上传到git" class="headerlink" title="最后使用命令行 把本地的Public 文件下的资源上传到git"></a>最后使用命令行 把本地的Public 文件下的资源上传到git</h3><blockquote><p>如果上面 设置正确,就可以把当前public 文件下的内容上传上去，这是我们最后在网页访问需要的所有东西<br>hexo g -d<br>在浏览器中輸入userName.github.io.git 可以访问到 hexo 提供的默认界面了   </p></blockquote><h2 id="扩展部分"><a href="#扩展部分" class="headerlink" title="扩展部分"></a>扩展部分</h2><ol><li><p>更换主题 , 默认主题是Hexo, 更多相关<a href="https://hexo.io/themes/">主题</a> 搜索 fluid 主题     </p><blockquote><p>到blog 根目录<br>将这个主题克隆到 根目录&#x2F;themes&#x2F;flui 目录下<br>git clone <a href="https://github.com/fluid-dev/hexo-theme-fluid.git">https://github.com/fluid-dev/hexo-theme-fluid.git</a> themes&#x2F;flui<br>打开根目录下_config.yml 找到theme 行,将其改成 theme:&amp;nbsp; flui (注意所有引号后都需要一个空格)  </p></blockquote></li><li><p>文章创建  </p><blockquote><p>hexo new articleName<br>会在source&#x2F;_posts 下生成articleName.md 的文件,进行编辑<br>生成静态网页并部署<br>hexo g -d<br>当然也可以在本地查看,将本机作为了服务器，开启服务利用下面命令行<br>hexo s</p></blockquote></li></ol><h3 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h3><p>npm install -g hexo-cli  安装hexo ,前提 Node.js正确安装<br>hexo init folder<br>npm install<br>hexo g  其实是hexo generate 的简写<br>hexo server 简写 hexo s<br>hexo g -d 生成并部署(上传)<br>npm install hexo-deployer-git –save  安装自动部署工具  </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[1] <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a><br></p>]]></content>
    
    
    <categories>
      
      <category>新手篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>firstone</title>
    <link href="/2022/08/31/firstone/"/>
    <url>/2022/08/31/firstone/</url>
    
    <content type="html"><![CDATA[<p> Runoob markdown test  </p><pre><code class="hljs">Hello world!hello</code></pre><p><em>斜体</em></p><ul><li>test</li></ul><ul><li>test</li></ul><ul><li>test</li></ul><p>段落换行<br>    第二行</p><p>第三行  </p><ol><li>第一行  <ul><li>嵌套元素</li></ul></li><li>第二行<ul><li>嵌套元素</li></ul></li></ol><h3 id="区块引用后面都有一个空格"><a href="#区块引用后面都有一个空格" class="headerlink" title="区块引用后面都有一个空格"></a>区块引用后面都有一个空格</h3><blockquote><p>去块引用<br>菜鸟教程<br>梦想<br>test </p></blockquote><h3 id="嵌套区块"><a href="#嵌套区块" class="headerlink" title="嵌套区块"></a>嵌套区块</h3><blockquote><p>最外层 </p><blockquote><p>第二层 </p><blockquote><p>第三层 </p></blockquote></blockquote></blockquote><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>test2</li><li>test3</li></ol><ul><li>test4</li></ul></blockquote><p>###列表中使用区块</p><ul><li>第一项 <blockquote><p>菜鸟教程<br>梦想</p></blockquote></li></ul><h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.runoob.com/">菜鸟教程</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="引号包住的是图片标题"><a href="#引号包住的是图片标题" class="headerlink" title="引号包住的是图片标题"></a>引号包住的是图片标题</h3><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="hello world" title="RUNOOB"></p><h2 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h2><table><thead><tr><th align="left">列好</th><th align="right">姓名</th><th align="center">年龄</th><th align="center">性别</th></tr></thead><tbody><tr><td align="left">1</td><td align="right">tom</td><td align="center">12</td><td align="center">男</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world\n&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><p><code>scanf();</code></p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>I really like using<br>Markdown.</p><p>I think I’ll use it<br>to format all of my documents<br>from now on.   </p><p>Br 换行<br><br>ddd</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="添加引用-并可以跳转"><a href="#添加引用-并可以跳转" class="headerlink" title="添加引用 并可以跳转"></a>添加引用 并可以跳转</h2><p> 引用<a href="#refer-anchor-1"><sup>4</sup></a></p><h2 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5 致谢"></a>5 致谢</h2><ul><li>歌词经理 <a href="https://github.com/lyricat/wechat-format" title="灵感来源">wechat-fromat</a></li><li>颜家大少 <a href="http://md.aclickall.com/" title="MdA2All">MdA2All</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<br>Front-end web development: <a href="https://en.wikipedia.org/wiki/Front-end_web_development">https://en.wikipedia.org/wiki/Front-end_web_development</a><br><br>[2] 灵感来源: <a href="https://github.com/lyricat/wechat-format">https://github.com/lyricat/wechat-format</a><br><br>[3]<br>MdA2All: <a href="http://md.aclickall.com/">http://md.aclickall.com/</a><br></p><div id="refer-anchor-1"></div>[4] [百度学术](http://xueshu.baidu.com/)]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/30/hello-world/"/>
    <url>/2022/08/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
